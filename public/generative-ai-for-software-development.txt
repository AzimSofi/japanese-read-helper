< 序文
この作品はAIを使って翻訳されている。ご意見、ご感想をお待ちしている：translation-feedback@oreilly.com
>> この本はAIで翻訳されています。フィードバック（translation-feedback@oreilly.com）を求めています。

< 我々は今、ソフトウェア開発における地殻変動の瞬間にいる。
>> ソフトウェア開発は今、大きく変化しています。

< ここ数年で、ジェネレーティブAIツールは目新しさから必需品へと変化した。IDEでのオートコンプリート候補から始まったものは、本格的なコパイロット、設計アシスタント、そしてコードのデバッグ、機能の出荷、アプリケーション全体の足場となるプロダクショングレードのエージェントへと進化した。ソフトウェアを構築する方法は変わりつつあり、それは非常に速いスピードで変化している。
>> 生成AIツールは、数年で目新しいものから必要不可欠なものに変わりました。オートコンプリートから始まり、今やデバッグやアプリケーション構築まで行う本格的なアシスタントに進化しています。ソフトウェア構築方法は非常に速く変化しています。

< 私は過去10年間、小数CTOとして、アーリーステージの企業がより良いソフトウェアをより速く出荷できるよう支援してきた。私の仕事は、開発速度と製品品質について高い基準を設定し、チームが最高のツールとプロセスを活用できるようにすることだ。つまり、私は時代の最先端を行く必要があり、最新のツールが入手可能になれば試してみる。どのツールがワークフローを改善できるかを評価し、開発プロセスに統合して採用を促進する。私は、ChatGPT、Cursor、GitHub Copilot、Lovableなどのツールを日々のソフトウェア開発プロセスに使用することで、ベロシティを加速させ、デリバリ品質を向上させたエンジニアリングチームを率いてきた。
>> 私は過去10年間CTOとして、スタートアップが迅速かつ高品質にソフトウェアを出荷できるよう支援してきました。最新のツールを評価し、導入して開発速度と品質を高めるチームを率いてきました。（例：ChatGPT、Cursor、GitHub Copilot、Lovableなどを使用）

< しかし、それは圧倒的だ。毎月新しいモデルがリリースされる。新しいツールは毎週発売される。そして毎日、開発者たちがより速くコーディングするため、新しいスタックを学ぶため、あるいは週末にゼロからローンチするためなど、まったく異なる方法でそれらを使っているのを目にする。私は、ついていくのに必死なのは私一人ではないとわかっていた。そこで私は一歩を踏み出し、見つけうるすべてのツールをテストし、ノイズからシグナルを抽出することにした。本書はその成果であり、ジェネレーティブAIを賢く活用したいソフトウェア・エンジニアのためのフィールドガイドである。
>> 毎月新しいAIモデルやツールが登場し、開発者は様々な方法で利用しており、情報が多すぎます。そこで、私は利用可能なツールをすべてテストし、重要な情報だけを選び出すことにしました。本書は、生成AIを効果的に活用したいソフトウェアエンジニアのためのガイドです。

< 本書の使い方
本書は、2025年現在のソフトウェア開発におけるジェネレーティブAIの状況についての実践的なガイドである。理論的な探求や定型的なチュートリアルのセットではない。その代わり、ツールの比較、実用的なワークフロー、実世界でのケーススタディに焦点を当てている。
>> 本書は、2025年の生成AIを用いたソフトウェア開発の現状を伝える実践的なガイドです。理論や一般的なチュートリアルではなく、ツールの比較、実用的な使い方、実際の事例に焦点を当てています。

< 同じプロンプトと課題を使い、何十ものツールを個人的にテストし、評価してきた。各章には、使用例、限界、批判的評価が含まれている。何が有効で何が有効でないかということだけでなく、そのようなツールをいつ、どのように使うか、また新しいツールを自分で評価する方法についても書かれている。
>> 私は同じプロンプトと課題で多くのツールをテストし評価しました。各章では、ツールの使い方、限界、評価を解説し、効果的な使い方や新しいツールの評価方法についても説明します。

< 本書は過去のスナップショットである。実際、いくつかの章は、ツールの状況が変化したため、編集プロセスの途中で書き直された。例えば、フロントエンドのコード生成について初めて書いたときには、Lovableは存在していなかった。その3ヵ月後には、Lovableが主流になっていた。だから、あなたがこれを読み終わる頃には、新しいツールが登場し、新しい機能がこの分野を再び定義し直しているかもしれない。
>> 本書は執筆時点（過去）の状況を捉えたものです。ツールの進化が速いため、編集中に章を書き直したこともあります（例：Lovableの登場）。読み終わる頃には、状況が変わっている可能性もあります。

< それでも構わない。本書は、単なる製品レビューのリストではなく、ツールやワークフローを評価するためのフレームワークを与えてくれる。
>> それでも大丈夫です。本書は単なる製品レビューではなく、ツールや使い方を評価するための考え方の枠組みを提供します。

< 本書の対象者
本書は、ソフトウェア・エンジニア、製品開発者、CTO、そして好奇心旺盛で、常に時代の最先端を行きたいと考えている人たちのためのものだ。
>> 本書は、ソフトウェアエンジニア、製品開発者、CTO、そして常に最新情報を追いたいと考えている人たちを対象としています。

< あなたが次のスタートアップを立ち上げるにせよ、エンジニアリング・チームを率いるにせよ、退屈なワークフローを自動化するにせよ、私のゴールは、日々の仕事でジェネレーティブAIができること（できないこと）をより明確に考える手助けをすることだ。機械学習の専門家でなくても、実践的な戦略、重要な評価、そして賢い決断を下すのに十分なコンテキストを発見できるだろう。
>> スタートアップの立ち上げ、チームの統率、作業の自動化など、どのような立場であれ、本書は生成AIで何ができるか（できないか）を明確にする手助けをします。機械学習の専門家でなくても、実用的な戦略、評価、そして賢い意思決定に必要な背景知識が得られます。

< 各章の概要
第1章「コード生成とオートコンプリート」では、ソフトウェア開発で最も広く採用されているAIツールのカテゴリー、コード生成とオートコンプリート・アシスタントを紹介する。ChatGPT、GitHub Copilot、Cursor、Geminiのようなツールが、ボイラープレートを減らし、学習を加速し、生産性を向上させることで、開発者の体験をどのように再構築しているかを説明している。この章では、30以上のツールの実践的な評価、強みと限界の詳細、ブラウザベースのアシスタントとIDE統合ソリューションの比較などが含まれている。また、実世界のコーディング課題に基づいてコード生成ツールを評価するために、本書を通して使用されている一貫性のある評価方法も紹介している。
>> 第1章「コード生成とオートコンプリート」は、ソフトウェア開発で最も使われているAIツールを紹介します。ChatGPT、Copilot、Cursor、Geminiなどが、定型的な作業を減らし、学習と生産性を向上させる方法を説明します。30以上のツールの実践的な評価、強みと弱み、ブラウザとIDE統合ソリューションの比較、そして評価方法を解説します。

< 第2章「ユーザインタフェースとユーザ体験設計」では、ジェネレーティブAIがUI/UX設計とフロントエンド開発にどのようなトランスフォーマーをもたらしているかを探る。自然言語からUIデザインを生成するツールと、それらのデザインをフロントエンドのコードに変換するツールだ。この章では、UizardやBolt.newのようなツールをテストすることで、AIがデザインからコードまでのワークフローを数週間から数時間に圧縮し、非デザイナーでもインタフェースを作成できるようにし、すぐに使えるHTML/CSS/Reactコードで開発者をサポートしていることを明らかにする。また、品質、柔軟性、独創性など、AIが生成するデザインのトレードオフについても議論し、これらのツールが価値をもたらす部分と、人間の創造性が依然として不可欠な部分とをマッピングしている。
>> 第2章「UI/UX設計」では、生成AIがUI/UXデザインとフロントエンド開発をどう変えているかを解説します。自然言語でUIデザインを生成し、それをコードに変換するツール（UizardやBolt.newなど）をテストし、デザインからコードまでの時間を大幅に短縮し、非デザイナーにもUI作成を可能にすることを示します。AIが生成するデザインの品質や柔軟性についての利点と欠点を議論し、AIの価値がある部分と人間の創造性が必要な部分を明確にします。

< 第3章「バグ検出とコードレビュー」では、AIを搭載したツールがコードレビューとバグ検出をどのようにトランスフォーマーー化し、人間だけの遅いプロセスから、より速く、より決定論的なシステムへと移行しつつあるかを取り上げる。IDEベース、Git統合、ブラウザベースの様々なツールを紹介し、リアルタイムのフィードバック、セキュリティ脆弱性の検出、スタイルの強制によってコードレビューを自動化する。SQLインジェクション、クロスサイト・スクリプティング（XSS）脆弱性、メモリ・リーク、非効率的なループなどの問題を、これらのツールがどのように捕らえ、品質、速度を向上させ、若手エンジニアの教育を向上させるかを、実践的な例で示す。
>> 第3章「バグ検出とコードレビュー」では、AIツールがコードレビューとバグ検出を、人間の遅い作業から迅速で確実なシステムへ変革する方法を探ります。IDEベース、Git統合、ブラウザベースのツールを紹介し、リアルタイムのフィードバック、セキュリティ検出、コーディングスタイルの強制でレビューを自動化します。実践例を通じて、これらのツールがSQLインジェクションやXSS、メモリリークなどの問題を捉え、品質、速度、そして若手エンジニアの教育をどのように向上させるかを示します。

< 第4章「自動テストと品質保証」では、生成AIがソフトウェアテストと品質保証をどのように合理化しているかを探る。自然言語のプロンプトからテストケースを生成するものから、ビジュアルUIのバグを検出し、自己修復テストを可能にするものまで、機能テストと非機能テストの両方のタスクを自動化するツールを比較している。実世界の事例やテストシナリオを通じて、この章では、AIがQAのパターンと繰り返しの負担を軽減し、リリースサイクルを加速し、より信頼性の高いCI/CDプロセスを可能にする方法を強調する一方で、エッジケースや判断の判断には人間のテスト担当者が引き続き必要であることを強調している。
>> 第4章「自動テストと品質保証」では、生成AIがソフトウェアテストと品質保証をどのように効率化するかを検証します。自然言語でテストケースを生成するものから、UIバグの検出や自己修復テストまで、機能・非機能テストを自動化するツールを比較します。実際の事例を通じて、AIがQAの繰り返し作業を減らし、リリースサイクルを加速し、信頼性の高いCI/CDプロセスを可能にする一方、複雑な判断には人間のテスターが必要であることを強調します。

< 第5章「予測分析とプロンプト最適化」では、AIツールによって、ソフトウェア開発者やその他の非技術職が、自然言語プロンプトとシンプルなUIを使用して、データセットを分析し、洞察を抽出し、将来の振る舞いを予測できるようになったことを示す。実世界の小売データセットに対してテストされたツールは、ビジネスに値する洞察を生成し、ユーザをセグメント化し、信頼できる予測を生成する能力について評価されている。この章では、民主化されたデータ知能の将来性と落とし穴の両方を強調している。
>> 第5章「予測分析とプロンプト最適化」では、AIツールが自然言語とシンプルなUIを使って、非技術者でもデータ分析、洞察の抽出、将来の予測を行えるようになったことを示します。小売データセットでツールをテストし、ビジネス価値のある洞察生成、ユーザーセグメント化、信頼できる予測能力を評価します。この章では、データ知能の民主化がもたらす可能性と潜在的な問題の両方を強調します。

< 第6章「ドキュメンテーションとテクニカルライティング」では、ソフトウェアエンジニアリングで最も軽視されている部分の1つであるドキュメンテーションに取り組んでいる。内部ドキュメント、API仕様、ユーザガイド、変更履歴を生成するAIツールを評価し、IDEやCIワークフローに組み込まれたものもあれば、スタンドアロンのものもある。この章では、ほとんどのドキュメントがメンテナンスされていない（あるいは全く書かれていない）理由も説明し、AIが高品質なドキュメントをより速く作成するのに役立つことを示す。各ツールは実際のコードベースでテストされ、深さ、正確さ、マークダウン形式、ユーザビリティが評価されている。
>> 第6章「ドキュメンテーションとテクニカルライティング」では、軽視されがちなソフトウェアドキュメントの課題に取り組みます。内部ドキュメント、API仕様、ユーザーガイドなどを生成するAIツール（IDE組み込み型やスタンドアロン型）を評価します。ドキュメントが書かれない理由を説明し、AIが高品質なドキュメントを迅速に作成するのに役立つことを示します。各ツールは実際のコードベースでテストされ、内容の深さ、正確性、フォーマット、使いやすさが評価されます。

< 第7章「チャットボットとバーチャルアシスタント」では、現代のLLMがチャットボットにできることをどのように再定義したかを探る。厳格なルールベースのフローを越えて、今日のAIチャットボットは、文脈に沿った会話を行い、タスクを実行し、APIとやり取りすることができる。この章では、ツールをノーコードビルダー、ドラッグアンドドロッププラットフォーム、フルコードSDKに分類し、セットアップの容易さ、事実の正確さ、記憶保持、デプロイプラットフォームの準備についてそれぞれを評価している。この章では、小売店のデータセットで構築されたテストケースを用いて、AIチャットボットが優れている点、ハルシネーションがある点、そして実際に役立つアシスタントを構築するために何が必要かを説明している。
>> 第7章「チャットボットとバーチャルアシスタント」では、現代のLLMがルールベースを超え、文脈に沿った会話やタスク実行、API連携が可能なチャットボットを再定義した方法を探ります。ツールをノーコードビルダー、ドラッグアンドドロッププラットフォーム、フルコードSDKに分類し、セットアップの容易さ、正確さ、記憶力、デプロイ準備を評価します。小売データセットのテストケースを使用し、AIチャットボットの強み、誤情報（ハルシネーション）の問題点、そして実用的なアシスタント構築に必要な要素を解説します。

< 最終章である第8章「実装成功事例」では、Pieter Levelsのようなインディーズハッカーが数時間でゲームを出荷したり、Shopifyの企業チームがCursorのようなツールを規律ある開発ワークフローに組み込んだりするなど、ジェネレーティブAIツールが実世界でどのように使われているかを紹介している。この章では、「バイブコーディング」の概念、コードを一行一行書くことからAIを使ったアーキテクトへのシフト、そしてソロビルダーと大規模チームにおける採用のダイナミクスの違いについて探求している。これらのストーリーは、あらゆるレベルのエンジニアが、AIが強化された未来において、生産性、プロンプト、コード品質をどのように見直しているかを示している。
>> 最終章「実装成功事例」では、生成AIツールが実世界でどのように使われているかを紹介します（例：Pieter Levelsが短時間でゲームをリリース、ShopifyがCursorを開発ワークフローに統合）。この章では、「バイブコーディング」（感覚的なコーディング）の概念、コードを直接書く人からAIを使った設計者への役割変化、そして個人開発者と大規模チームでの導入の違いを探ります。これらの事例は、AIを活用した未来において、エンジニアが生産性、プロンプト、コード品質をどのように捉え直しているかを示します。

< 第1章 コード生成とオートコンプリート コード生成とオートコンプリート
この作品はAIを使って翻訳されている。ご意見、ご感想をお待ちしている：translation-feedback@oreilly.com
>> 第1章 コード生成とオートコンプリート
（AI翻訳に関するフィードバック募集の旨は序文で繰り返されているため省略）

< 人工知能は、コード生成とオートコンプリートにおける生産性と創造性を大幅に向上させることができる。この章では、AI主導のツールがコーディング体験をどのように再定義し、時間のかかる手作業のプロセスを、やり取りができ、効率的で、エラーを減らす努力にトランスフォーマーするのかを探る。
>> AIはコード生成とオートコンプリートにおいて生産性と創造性を大きく向上させます。この章では、AIツールが、時間のかかる手作業を、対話的で効率的、かつエラーを減らす作業に変えることで、コーディング体験をどのように変えるかを探ります。

< コード生成におけるAIの登場は、単に開発者のタイピングスピードを加速させるということではなく、作業のコンテキストを理解し、関連するコードスニペットを提案し、さらには最小限の入力で複雑なコードブロックを生成するということである。洗練度の高いマシン学習アルゴリズムを搭載したこれらのツールは、公開・非公開データベースにある膨大なコード・リポジトリから学習し、提案内容と精度を継続的に向上させる能力を備えている。
>> コード生成AIは、単にタイピングを速くするだけでなく、作業の文脈を理解し、関連コードを提案し、少ない入力で複雑なコードブロックを生成します。これらの洗練されたツールは、大量のコードから学習し、提案の質と精度を継続的に向上させます。

< 私は、ソフトウェア・エンジニアが、あるソフトウェア開発タスクで100％の作業を行うことから、AIツールが提供する貢献のレビュアーになるにはどうすればよいかを検討する。これには、これらのツールから何を要求するかについて適切なインプットを確保し、成果物が要求を満たしているかどうかを確認するためにアウトプットを徹底的に修正することが必要である。
>> ソフトウェアエンジニアが、自ら100%作業するのではなく、AIが提供したコードをレビューする役割になる方法を考察します。そのためには、AIに適切な指示を与え、生成されたコードが要求を満たしているかを徹底的に確認・修正することが必要です。

< これらのAIツールは強力で印象的だが、適切な予防措置なしにそのアウトプットを使うという罠に陥りがちだ。例えば、コードがどのように、そしてなぜ機能するのかを検証せずにプルリクエストを開いたり、コードを本番環境にプッシュしたりすることだ。この無頓着なアプローチには、2つの重要なリスクがある：
>> AIツールは強力ですが、生成されたコードを検証せずに使うと危険です（例：仕組みを理解せずに本番環境にプッシュ）。この無頓着な使い方には、2つの主要なリスクがあります。

< 古いコード
ほとんどのAIツールは、もはや最新ではないのデータでトレーニングされているため、時代遅れのフレームワークや機能を提案する可能性がある。
>> リスク１：古いコード
AIツールは最新でないデータで学習しているため、古いフレームワークや機能を提案する可能性があります。

< 誤った回答
大規模言語モデル （LLM）は、これらのツールの基礎となる、一般的に "ハルシネーション "と呼ばれるものを生成することがある。つまり、その出力には誤った記述やバグ、存在しないコード関数やAPIエンドポイントが含まれる可能性がある。
>> リスク２：誤った回答（ハルシネーション）
LLMは、誤った情報やバグ、存在しない関数やAPIエンドポイントを含む出力を生成する可能性があります。これは一般に「ハルシネーション」と呼ばれます。

< ソフトウェア・エンジニアや開発者は、AIツールをより良く、より速く作業するために使わなければならないが、自分自身の判断に取って代わるような使い方をしてはならない。これは、ほとんどの統合開発環境（IDE）で、人気となっているオートコンプリート機能と同じだ。もちろん、すべての文字を入力する代わりにタブキーを押すだけでいいというのは大いに助かるが、オートコンプリートの候補は、完全に関連するものから役に立たないものまでさまざまだ。使うか捨てるかはあなたの判断次第だ。
>> エンジニアはAIツールを効率化のために使うべきですが、自分の判断をAIに任せてはいけません。これはIDEのオートコンプリート機能と同じです。候補は役立つものから無意味なものまであり、それを使うか捨てるかは利用者の判断にかかっています。

< この章で取り上げるAIツールも、同じように常に評価を必要とする。多くの場合、これらのツールが生成するコードは機能し、タスクの要件に完璧に適合する。しかし、部分的にしか完成していなかったり、バグやパフォーマンスの問題など、修正しなければならない欠陥が含まれていたりする場合もある。それを使うか、捨てるか、修正するかはあなたの仕事だ。
>> 本章で取り上げるAIツールも常に評価が必要です。生成されたコードは機能することが多いですが、未完成だったり、バグやパフォーマンスの問題があったりする場合もあります。それを使用するか、破棄するか、修正するかはエンジニアの責任です。

< コード生成ツールの種類
本章でレビューしたAIツールは、ソフトウェア開発におけるツールの使用方法が若干異なる2つの主要なカテゴリーに分類される：
>> コード生成ツールには、ソフトウェア開発での利用方法が少し異なる2つの主な種類があります。

< ブラウザベースのツール
ChatGPTのようなこれらのツールを使えば、ログインしてブラウザ上でモデルとやり取りすることができる。あなたのローカル・コンピューター上では何も行われず、インターネット上のWebサイトとのやり取りが行われるだけだ。これらのツールは使いやすく、より多くのユースケースに適応できるが、最大の欠点はコンテキストウィンドウが限られていることだ。やり取りをするたびにプロンプトにコンテキストを手動でタイプしたり、コピー・ペーストしたりしなければならず、大規模なコードベースやドキュメントの断片を扱うときには限界がある。
>> 種類１：ブラウザベースのツール
ChatGPTなどのツールは、ブラウザでログインして利用し、ローカルPCでは何も処理されません。使いやすいですが、コンテキストウィンドウが限られているのが欠点です。大規模なコードベースを扱う場合、対話ごとにコンテキストを手動で入力またはコピー・ペーストする必要があるため限界があります。

< IDEベースのツール
GitHub Copilotのようなこれらのツールは、ローカルのコンピューターでコードを書くために使っているIDEにインストールされるプラグインとして機能する。一度インストールすれば、コードを書く実際の環境に、あなたのソフトウェア開発者体験に組み込まれることになる。最大の長所は、大きなコンテキストウィンドウだ。これらのツールは、それぞれのやり取りのコンテキストとして、コードベース全体を取り込むことができる。
>> 種類２：IDEベースのツール
GitHub Copilotのようなツールは、ローカルPCのIDEにプラグインとしてインストールされ、コーディング環境に統合されます。最大の利点は、大きなコンテキストウィンドウで、対話の際にコードベース全体をコンテキストとして利用できることです。

< 使用例
何百万人ものソフトウェア・エンジニアが、日々のタスクをサポートするためにAIツールを採用している。これらのツールが開発に影響を与える最も顕著な5つのユースケースは以下の通りである：
>> AIツールは、何百万人ものエンジニアに利用されており、開発に影響を与える特に重要な5つの利用例があります。

< コード・スニペット化
コードベースの単語や機能をひとつひとつ入力する代わりに、コードが満たすべき特定の要件をAIツールに提供する。これは、最も人気のあるプログラミング言語（Java、Python、PHP、JavaScriptなど）のどれでも、すぐに使えるコードを出力する。これにより、プロトタイピングだけでなく開発プロセスもスピードアップできる。この章で、ウェブ開発、データ分析、自動化スクリプト、モバイル・アプリケーションなど、幅広いアプリケーションのコードを生成することができる。一般的には、AIが概念化と実装のギャップを埋め、技術開発をより身近で効率的なものにするユースケースである。
>> 利用例１：コード・スニペットの生成
AIツールに要件を与えることで、Java、Python、JavaScriptなどの人気言語で即座にコードを生成できます。これはプロトタイピングと開発プロセスを加速させます。AIは概念と実装のギャップを埋め、技術開発をより効率的にします。

< デバッグ
デバッグはソフトウェア開発において時間がかかり、フラストレーションがたまる部分であるため、このユースケースは特に価値がある。これらのAIツールは、エラーメッセージや問題のあるコードスニペット化を分析し、具体的な変更や改善を提案する。これは時間を節約し、教育ツールとしても機能するため、時間とともにデバッグ・スキルが向上する。ツールによっては（ChatGPTのように）、特定のエラーが発生する理由や、時にはそのエラーを回避するためのアーキテクチャ上のトレードオフまで説明してくれるものもある。ソフトウェア開発における一般的な落とし穴をより深く理解できることが、多くの開発者がコーディングアシスタントとしてAIツールを使用する主な理由だ。
>> 利用例２：デバッグ
デバッグは時間とフラストレーションを伴うため、この機能は特に価値があります。AIツールはエラーメッセージや問題のあるコードを分析し、具体的な修正を提案します。これにより時間が節約され、ツールの説明（例：ChatGPT）を通じてデバッグスキルも向上します。一般的な落とし穴の理解を深めることは、AIをアシスタントとして使う主要な理由の一つです。

< 学習を加速する
AIツールは、習熟していない技術スタックのスピードアップ、新しいプログラミング言語やフレームワークの学習、MySQLデータベースのテーブルにインデックスを追加したり、Stripe APIから先月のトランザクションを引き出したりするような特定の実装の詳細を理解しようとしている場合に、インストラクター（）として機能することができる。チュートリアル、例題、さまざまなテクノロジーに関するドキュメントの簡潔な要約を提供することができる。AIツールとのこのような教育的やり取りは、特定の技術や学習内容の範囲に関係なく、あなたの成長をスピードアップさせることができる。
>> 利用例３：学習の加速
AIツールは、不慣れな技術スタックでの作業や、新しい言語・フレームワークの学習、特定の実装（例：データベースのインデックス追加、APIからのデータ取得）の理解が必要な場合に、教師として機能します。チュートリアル、例、ドキュメントの要約を提供し、技術や学習内容に関わらず、エンジニアの成長を加速させます。

< コードの最適化
多くのソフトウェア・エンジニアは、AIツールを使ってコードをレビューし、より効率的で読みやすく、、保守しやすいものにしている。これには、コードのリファクタリング、より効率的なアルゴリズムの使用、パフォーマンスやセキュリティのベストプラクティスの適用などの推奨が含まれる。コードの最適化は継続的な課題であり、つい忘れてしまいがちだ。しかし最終的には、最適化されていないコードが膨大な技術的負債となって積み上がり、コードベース全体のリファクタリングが必要になる。タスクレベルでのコードレビューにAIツールを使うことで、コードベース全体の品質に大きな影響を与えることができる。
>> 利用例４：コードの最適化
エンジニアはAIツールを使ってコードをレビューし、効率的で読みやすく保守しやすいものにします。AIはリファクタリング、効率的なアルゴリズムの使用、パフォーマンス・セキュリティのベストプラクティスの適用などを推奨します。コード最適化は忘れがちですが、AIをタスクレベルのコードレビューに利用することで、技術的負債を減らし、コードベース全体の品質を大きく向上させることができます。

< ドキュメンテーションの自動化
ドキュメンテーションは、ソフトウェア・プロジェクトを維持・理解するために不可欠であるが、開発者、見落としたり、軽視したりすることが多い。AIツールの中には、関数、クラス、モジュールに関するインラインコメントや詳細を含むドキュメントを生成できるものもある。これによって時間を節約し、コードベースとともに一貫性をもってドキュメントが更新される。明確で包括的なドキュメントをプロバイダーすることで、AIツールはコードの可読性を向上させ、チームのコラボレーションを容易にする。このユースケースは、他の開発者が効果的に貢献できるようにするために明確なドキュメントが重要な、大規模チームやオープンソースプロジェクトで使用する場合に特に有益である。ドキュメンテーションの自動化はまた、プロジェクトの保守性を高め、開発チーム内での知識伝達を促進する。
>> 利用例５：ドキュメンテーションの自動化
ドキュメントは重要ですが、開発者に見落とされがちです。AIツールは、関数やクラスの詳細を含むドキュメントやインラインコメントを生成でき、時間の節約とドキュメントの一貫性を保ちます。これによりコードの可読性が向上し、チームでのコラボレーションが容易になります。特に大規模チームやオープンソースプロジェクトで有用であり、プロジェクトの保守性と知識伝達を促進します。

< 前述の通り、ソフトウェア開発用のAIツールには、ブラウザベースとIDEベースの2つの主要なグループがある。まずはブラウザベースのツールから見ていこう。
>> 前述の通り、AIツールはブラウザベースとIDEベースに分けられ、まずブラウザベースのツールから見ていきます。

< ブラウザベースのツール
ブラウザベースのAIツールは、Webサイトにアクセスするだけで利用できるため、非常に便利である。一方で、これらのツールはユーザがプロンプトにすべてのコンテキストを含める必要がある。このため、大規模なコードベースで使用したり、複雑なアプリケーションのコードを生成したりするのは現実的ではない。ブラウザツールと、コードがあるソフトウェア・エンジニアのIDEとの間で、多くのコピー／ペーストやり取りが必要になるからだ。
>> ブラウザベースのAIツールは、ウェブサイトからアクセスできて便利ですが、ユーザーがプロンプトにすべての文脈を含める必要があります。そのため、大規模なコードベースや複雑なアプリケーション開発には、IDEとの間で頻繁なコピー＆ペーストが必要となり、現実的ではありません。

< ChatGPT
ChatGPTはOpenAIによって開発されたLLMであり、おそらく本書で取り上げる中で最も、広く使われているAIツールである。ChatGPTは2022年11月のローンチ以来、爆発的な成長を遂げている。2025年4月までに、週間アクティブユーザ数は約8億人に達し、ユーザ数はわずか数週間で倍増した。プラットフォームは毎日10億以上のクエリを処理し、世界で最も訪問者の多いWebサイトのトップ5に入るようになった。1
>> ChatGPTはOpenAIが開発したLLMで、おそらく本書で最も広く使われているツールです。2022年11月のローンチ以来急速に成長し、2025年4月までに週間アクティブユーザーは約8億人に達し、世界で最も訪問者の多いウェブサイトのトップ5に入っています。

< ChatGPTの人気とともにOpenAIの収益も急増しており、2024年の37億ドルから2025年には127億ドル（）を超えると予測されている。この成長は、Plus、Team、Proの各階層で2,000万人を超える有料会員によって促進され、毎月少なくとも4億1,500万ドルの収益に貢献している。この急速な普及は、同社の継続的な技術革新に起因する。2024年5月のGPT-4oの導入部では、マルチモダリティ機能が導入され、ユーザはテキスト、音声、画像を通じてリアルタイムで対話できるようになった。GPT-4.1やo3のようなネイティブ画像生成や高度な推論モデルを含むその後のアップデートは、その機能をさらに強化した。2
>> ChatGPTの人気に伴いOpenAIの収益も急増し、2025年には127億ドルを超えると予測されています。この成長は2,000万人以上の有料会員によるもので、月間4億1,500万ドル以上の収益に貢献しています。2024年5月のGPT-4o導入（テキスト、音声、画像でのリアルタイム対話）やその後のアップデート（画像生成、高度な推論モデル）など、継続的な技術革新が普及を後押ししています。

< ChatGPTの進化は、テキストベースのチャットボットから多目的なAIアシスタントへとトランスフォーマー化し、個人や企業とテクノロジーとのやり取りを再構築した。ユーザフレンドリーなインタフェースと強力な機能により、個人の生産性向上から企業ソリューションまで、幅広いアプリケーションに欠かせないツールとなっている。
>> ChatGPTは、テキストチャットボットから多目的なAIアシスタントへと進化し、個人や企業とテクノロジーとの関わり方を変えました。使いやすいインターフェースと強力な機能により、生産性向上から企業ソリューションまで、幅広い分野で不可欠なツールとなっています。

< 図1-1に見られるように、ChatGPTはユーザがプロンプトを書いて数秒以内に返信を得ることができるチャットボット・インターフェースを提示する。OpenAIは最近ChatGPTコードエディタを追加し、画面の右側にコンソールとプレビューを開くことができるようにした。
>> ChatGPTは、ユーザーがプロンプトを入力すると数秒で返信が来るチャットボットインターフェースを提供しています（図1-1）。OpenAIは最近コードエディタを追加し、画面右側でコンソールとプレビューを開けるようにしました。

< 図1-1. ChatGPT UI
>> (図1-1: ChatGPTのユーザーインターフェースを示す画像への言及)

< これは、ブラウザベースとIDEベースのツールのギャップを埋めるOpenAIの試みだ。開発者がChatGPT上でコードを編集・実行できるようにすることで、ChatGPTと開発者のIDE間のコピー＆ペースト（）を最小限に抑えることを狙っている。
>> これは、ブラウザベースとIDEベースのツールの間の差を埋めようとするOpenAIの試みです。開発者がChatGPT上でコードを編集・実行できるようにし、IDEとの間のコピー＆ペーストを減らすことを目指しています。

< Google Gemini
GeminiはGoogleのChatGPTに対する直接の競合である。2023年12月に発表され、前身のBardから進化している。GeminiはGoogleのエコシステム全体をシームレスに統合し、Gmail、Docs、Sheetsのようなアプリケーションでのユーザ体験を向上させる。2025年4月までに、Geminiは約2億7,500万人の月間アクティブユーザーを抱えるまでになった。3
>> Google Geminiは、2023年12月に発表されたChatGPTの直接的な競合で、以前のBardから進化しました。GmailやDocsなどのGoogleエコシステムと統合され、ユーザー体験を向上させています。2025年4月までに、月間アクティブユーザーは約2億7,500万人に達しました。

< Geminiの機能は、リアルタイムの会話支援を提供するGemini Liveや、ドキュメントをポッドキャスト形式の要約に変換するAudio Overviewsなどの機能の導入部によって拡張された。さらに、Gemini Advancedのユーザは、テキストプロンプトから短いビデオを生成することができ、従来のビデオ制作ツールがなくてもコンテンツ制作を容易にする。
>> Geminiの機能は、リアルタイム会話支援（Gemini Live）やドキュメントをポッドキャスト要約に変換する機能（Audio Overviews）などで拡張されました。Gemini Advancedのユーザーはテキストから短い動画を生成でき、コンテンツ制作が容易になっています。

< このプラットフォームの成長は、150万人以上の開発者がGeminiを使用して構築し、その多様なアプリケーションに貢献していることによってさらに支えられている。GoogleのAIに対する戦略的フォーカスの一環として、Geminiは進化を続け、幅広いユーザニーズに応える革新的解決策を提供している。
>> 150万人以上の開発者がGeminiを使用してアプリケーションを構築しており、このプラットフォームの成長を支えています。GoogleのAI戦略の中核として、Geminiは進化し続け、幅広いユーザーニーズに応える革新的なソリューションを提供しています。

< ChatGPTと類似性のあるGoogle Geminiは、ユーザがプロンプトを送信してレスポンスを得ることができるチャットインタフェースを備えている。また、画面の右側にコードとプレビューパネルが表示され、ブラウザの内側で開発者体験ができるようになった（図1-2参照）。多くのソフトウェアエンジニアにとって、この便利な機能により、Geminiは小規模なスクリプトやプロジェクトに十分なものとなっている。
>> Google GeminiはChatGPTと似たチャットインターフェースを持ち、プロンプトに答えます。また、画面右側にコードとプレビューパネルがあり、ブラウザ内で開発作業が可能です（図1-2）。この機能は、多くのエンジニアにとって小規模なスクリプトやプロジェクトに十分役立ちます。

< 図1-2. Google Gemini UI
>> (図1-2: Google Geminiのユーザーインターフェースを示す画像への言及)

< IDEベースのツール
次に、ネイティブのAI対応IDEと人気IDE用のAI支援プラグインの両方を含め、ソフトウェア・エンジニアを支援するために市場で入手可能なIDEベースのトップ・ツールをレビューしよう。
>> 次に、ソフトウェアエンジニア向けのトップIDEベースツールをレビューします。これには、AI対応のネイティブIDEと、人気IDE用のAIアシスタントプラグインの両方が含まれます。

< GitHub Copilot（ギットハブ・コパイロット
GitHub Copilotは2021年に導入され、ソフトウェア・エンジニアにとって極めて重要な・ツールへと急速に進化した。AIによるコード提案を提供し、様々な開発環境に統合されている。2025年までにCopilotの有料会員数は100万人を超え、77,000以上の組織で利用されるようになり、企業での導入は前年比で180%増加した。このツールはGitHubの財務的成長に大きく貢献しており、プラットフォームの収益の40％以上を占めており、2025年4月時点で年間20億ドルの収益に達している。4
>> GitHub Copilotは2021年に導入され、AIによるコード提案を提供する重要なツールへと急速に成長しました。2025年までに有料会員は100万人を超え、77,000以上の組織で利用され、企業での導入が急増しています。CopilotはGitHubの成長に大きく貢献し、2025年4月時点で年間20億ドルの収益に達しています。

< Copilotの機能は、基本的なコード補完にとどまらない。現在では、開発者がAIとやり取りしてコードの説明や提案を受けることができるCopilot Chatや、Azure、Docker、MongoDBなどのツールと統合するCopilot Extensionsなどの機能が含まれている。さらに、Copilot Pro+の導入部では、AnthropicのClaude 3.7やGoogleのGemini Flash 2.0などの高度なAIモデルにユーザがアクセスできるようになり、ツールの汎用性が高まった。
>> Copilotは基本的なコード補完を超え、AIと対話してコードの説明や提案を受けられるCopilot Chatや、Azure、Dockerなどと統合するCopilot Extensionsなどの機能が含まれています。Copilot Pro+では、Claude 3.7やGemini Flash 2.0などの高度なAIモデルにアクセスできるようになり、汎用性が向上しました。

< Copilotが開発者の生産性に与える影響は注目に値する。調査によると、Copilotを使用した開発者はコーディング効率が最大55%向上し、仕事への満足度が高まったと報告している。5継続的な進化とユーザ数の増加により、GitHub Copilotは世界中の開発者にとってコーディングをより身近で効率的なものにし、ソフトウェア開発の状況を再定義している。
>> Copilotは開発者の生産性に大きな影響を与えています。調査では、Copilotを使った開発者はコーディング効率が最大55%向上し、満足度も高まったと報告されています。継続的な進化とユーザー増加により、Copilotはコーディングをより効率的にし、ソフトウェア開発の状況を再定義しています。

< Copilotのインタフェースは、インストールされているIDEでのユーザのデフォルト体験には影響を与えない。しかし、ユーザがチャットを起動できるキーボード・ショートカットのレイヤーを追加し、右側のパネルとして（図1-3に見られるように）、またはコード・ビューのインラインで、オートコンプリートや特定のコード・ブロックとの対話を行えるようにする。
>> Copilotのインターフェースは、インストール先のIDEの通常体験を変えません。しかし、キーボードショートカットでチャットを起動でき、右側パネル（図1-3）またはコード内のインラインで、オートコンプリートや特定のコードブロックとの対話が可能になります。

< 図1-3. GitHub Copilot UI
>> (図1-3: GitHub Copilotのユーザーインターフェースを示す画像への言及)

< GitHub Copilotは、Visual Studio Code、JetBrains、Eclipse、Xcodeなどの人気IDEと統合されている。ほとんどのソフトウェアエンジニアはすでにこれらのIDEを使っていたため、GitHub Copilotのインストールは拡張機能検索でクリックするだけでよかったのだ。
>> GitHub Copilotは、Visual Studio Code、JetBrains、Eclipse、Xcodeなどの人気IDEと統合されています。多くのエンジニアが既にこれらのIDEを使っているため、Copilotのインストールは拡張機能検索から簡単に行えました。

< ソフトウェア開発分野でAIアシスタントを市場に投入するこのアプローチは、次にレビューするように、いわゆるAIネイティブIDEによって挑戦された。また、Copilotは以前はOpenAIのモデルのみを提供していたが、CursorとWindsurfが人気となったため、現在は、OpenAI、Anthropic、Googleのモデルから選択できるようになっている。
>> AIアシスタントをIDEプラグインとして提供するこのアプローチは、AIネイティブIDEによって挑戦されています。また、Copilotは以前OpenAIモデルのみでしたが、CursorとWindsurfの登場により、現在はOpenAI、Anthropic、Googleのモデルから選択できるようになっています。

< カーソル
Anysphereが2023年に発表したCursorは、ソフトウェア開発者体験を再定義する、AI-ネイティブの主要コードエディタとして急速に台頭した。Visual Studio Codeのフォークとして構築されたCursorは、高度なAI機能をコーディング環境に直接統合し、インテリジェントなコード生成、スマートな書き換え、自然言語によるコードベースクエリなどの機能を提供する。GitHub Copilotや人気IDEの拡張機能（TabnineやAWS CodeWhispererなど）とは異なり、Cursorはそれ自体がIDEであり、ユーザはデバイスにインストールする必要がある。そのため、GitHub Copilotやその他の拡張機能だけでなく、Visual Studio Codeや人気のあるIDEとも競合する。Cursorがローンチした当時、これは非常に大胆な戦略だと見られていた。
>> Anysphereが2023年に発表したCursorは、AIネイティブの主要コードエディタとして急速に普及しました。Visual Studio Codeから派生し、コード生成、スマートな書き換え、自然言語によるコードクエリなど、高度なAI機能を直接統合しています。Copilotなどの拡張機能と異なり、Cursor自体がIDEでありインストールが必要です。そのため、既存のIDEやプラグインと競合する大胆な戦略と見なされていました。

< 2025年初頭までに、アニスフィアは、年間経常収益2億ドルという驚くべきマイルストーンを達成した。この成長は、主にCursorのユーザ中心のアプローチに起因しており、36万人以上の個人購読者がProとBusinessプランを選択している。特筆すべきは、Anysphereがマーケティング費用を一切かけずに、口コミとCursorの堅牢な機能セットに頼ってユーザを引きつけ、これを達成したことである。6
>> 2025年初頭までに、Anysphereは年間経常収益2億ドルを達成しました。この成長は、ユーザー中心のアプローチと36万人以上の有料購読者によるものです。Anysphereはマーケティング費用を使わず、口コミとCursorの強力な機能のみでユーザーを獲得しました。

< Cursorの成功は、OpenAI、Shopify、Instacartなどの著名なテック企業のエンジニアに採用されていることでも裏付けられている。直感的なインタフェースと強力なAI統合により、生産性の向上とコーディングワークフローの合理化を求める開発者に好まれるツールとなっている。ほとんどのソフトウェア・エンジニアがそうであるように、長年同じIDEを使い続けている人の乗り換えコストを考えると、この好みは特に注目に値する。
>> CursorはOpenAI、Shopify、Instacartなどの大手企業のエンジニアにも採用されています。直感的なインターフェースと強力なAI統合により、生産性向上を目指す開発者に好まれています。長年同じIDEを使っているエンジニアが多い中でのこの採用傾向は特筆すべきです。

< CursorのUI（図1-4）は、フォークであるVisual Studio Codeに似ている。GitHub Copilotと同様に、特定のコードブロックとのインラインでのやり取りから、より複雑なやり取りをするためのチャットパネルまで、その機能を可能にするキーボードショートカットを備えている。
>> CursorのUI（図1-4）は、派生元であるVisual Studio Codeに似ています。GitHub Copilotと同様に、キーボードショートカットがあり、特定のコードブロックとのインラインでの対話や、より複雑な対話のためのチャットパネルを利用できます。

< 図1-4. カーソルUI
>> (図1-4: Cursorのユーザーインターフェースを示す画像への言及)

< Cursorのチャット対話は、ユーザの要求を満たすためにファイルやフォルダを作成する。これは、提案されたコードが満足のいくもので、適切に動作する場合にはとても便利だが、提案されたコードがアプリケーションを破損したり、以前動作していた機能を損なったりした場合にロールバックするのは難しいかもしれない。実はこれが、Cursorやこの章に登場する他のIDEベースのツールに対する、私の最大の不満のひとつ。
>> Cursorのチャット対話機能は、ユーザーの要求に応じてファイルやフォルダを作成します。提案されたコードが完璧に機能する場合は便利ですが、コードがアプリケーションを壊したり、以前の機能を損なったりした場合、元に戻すのが難しい場合があります。これが筆者がCursorや他のIDEベースのツールに対して抱く最大の不満の一つです。

< ウィンドサーフ
Codeiumが2024年11月に発表したWindsurfは、AIネイティブのIDEであり、、コーディング体験に革命を起こすように設計されている。Codeiumの以前のツールの基盤の上に構築されたWindsurfは、AIによる支援と開発者のワークフローを融合させた、ソフトウェア開発への「エージェント的」アプローチを導入している。その主要機能であるCascadeは、開発者のニーズを予測する知能エージェントとして機能し、コンテキストに応じたコード提案、自動デバッグ、リアルタイムのコラボレーション機能を提供する。
>> Codeiumが2024年11月に発表したWindsurfは、コーディング体験を変革するために設計されたAIネイティブのIDEです。Codeiumの既存ツールを基盤とし、AI支援と開発ワークフローを融合させる「エージェント的」アプローチを導入しています。主要機能のCascadeは、開発者のニーズを予測し、状況に応じたコード提案、自動デバッグ、リアルタイムコラボレーション機能を提供します。

< 2025年初頭までに、ウィンドサーフは開発者コミュニティで大きな注目を集め、約27億5000万ドルの評価額と4000万ドルを超える年間経常収益を達成した。同プラットフォームの急速な普及は、直感的なユーザインタフェース、AI機能の深い統合、月額10ドルの手頃なプロ版と並んで無料層を提供する価格モデルに起因している。
>> 2025年初頭までに、Windsurfは開発者コミュニティで注目を集め、評価額は約27億5000万ドル、年間経常収益は4000万ドルを超えました。この急速な普及は、直感的なUI、AI機能の深い統合、そして無料プランに加え手頃な価格のプロ版を提供する料金モデルによるものです。

< マルチファイル編集、自然言語コマンドのサポート、完全なコンテキスト認識といったウィンドサーフの革新的な機能は、AI主導の開発ツール業界において強力な競争相手として位置づけられている。開発者が「フロー状態」を維持できるよう支援することに重点を置いているため、コーディングがより効率的になり、断片化されることが少なくなる。
>> Windsurfのマルチファイル編集、自然言語コマンド、完全なコンテキスト認識などの革新的な機能は、AI主導の開発ツール業界で強力な競争力を確立しています。開発者が「フロー状態」を維持できるよう支援することに焦点を当てており、コーディングがより効率的で中断が少なくなります。

< WindsurfのUI（図1-5）はCursorに似ている。また、特定のコードブロックとのインラインやり取り、より複雑なやり取りのためのチャットパネルのオープン、組み込みターミナルなどの機能を可能にするキーボードショートカットを備えている。
>> WindsurfのUI（図1-5）はCursorに似ています。このIDEもキーボードショートカットを備えており、特定のコードブロックとのインライン対話、複雑な対話のためのチャットパネル、そして組み込みのターミナルなどの機能を利用できます。